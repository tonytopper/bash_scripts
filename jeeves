#!/bin/bash

# **************************************************
# Bash Drupal Deployment Script
#
# Uses the drush command line tool in conjunction with svn
# 
# Exit Code Meanings
# 1: shflags error
# 2: Environment not found
# 3: Project not found
# **************************************************

#Find the directory this script is located in
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
while [ -h "$SOURCE" ]
do 
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

. $DIR/shflags/src/shflags

# Configure shflags
FLAGS_HELP="USAGE: $0 [flags] project"
DEFINE_boolean 'sync' false 'Pull files from production' 's'
DEFINE_boolean 'debug' false 'Echos debug information to the screen' 'd'
DEFINE_string 'env' 'mir' 'Environment to execute the command in' 'e'

FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

REMOTE=false # Does the script need tobe executed on a remote system?
ACTION=$1  # What action are we performing on the project
PROJECT=$2 # Name assigned to a project

#Production information
webhost[1]=harrisburg.psu.edu
webroot[1]=/var/www/html
port[1]=1855
#Sandbox information
webhost[2]=websandbox.hbg.psu.edu
webroot[2]=/var/www/drupal
port[2]=22

# **************************************************
# Setup the enviroments
# TODO: Have this loaded from an external file
# **************************************************
case "${FLAGS_env}" in
  sand)
    ENVNUM=2
    REMOTE=true
    WEBENVHOST=${webhost[2]}
    DRUSHALIAS=@sand
    WEBROOT=${webroot[2]}
    PORTNUMBER=${port[2]}
    ;;
  mir)
    WEBENVHOST=staging.hbg.psu.edu
    DRUSHALIAS=@mir
    WEBROOT=/var/www/8001
    SYNCEXCLUDEFILE=/var/www/production-to-staging-rsync-exclude-list.txt
    ;;
  prod)
    REMOTE=true
    ENVNUM=1
    WEBENVHOST=${webhost[1]}
    DRUSHALIAS=@prod
    WEBROOT=${webroot[1]}
    PORTNUMBER=${port[1]}
    ;;
  dev)
    WEBENVHOST=webmirror.hbg.psu.edu
    DRUSHALIAS=@dev
    WEBROOT=/var/www/html
    SYNCEXCLUDEFILE=/var/www/production-to-development-rsync-exclude-list.txt
    ;;
  *)
    echo "Environment not found."
    exit 2
esac

# **************************************************
# Generate the deployment function 
# TODO: Some of these are identical, DRY it out
#
# DEPLOYFUNCTION is a string that contains the code 
# for a function.  We first make the function a string
# so we can pass it through ssh and declare it on another 
# system
# **************************************************

# This function sets the repository based on the output of svn info
function set_repo() {
  REPO=$(svn info "$1" | grep 'URL' | awk '{print $NF}')
}

# Bash scope is very different than a traditional programing language
function standard_feature_deployment() {
  PROJECTDIR="${WEBROOT}/sites/all/modules/${PROJECT}" 
  set_repo $PROJECTDIR
  read -d '' DEPLOYFUNCTION << _EOFD_
function runDeployment {
  mkdir -p ${PROJECTDIR}
  echo 'Updating ${PROJECT} from ${REPO}.'
  svn checkout ${REPO} ${PROJECTDIR}
  echo 'Clearing Drupal cache.'
  drush $DRUSHALIAS cc all

  echo 'Reverting feature.'
  drush $DRUSHALIAS fr ${PROJECT} -y
}
_EOFD_

  return 0
}

#TODO: Rather than having to enter new Features into this case statement get this to work with any feature that has a .svn directory.
case "${PROJECT}" in
  theme)
    PROJECTDIR=/sites/all/themes/penn_state_harrisburg
    read -d '' DEPLOYFUNCTION << _EOFD_
function runDeployment {
  echo 'Updating project from source repository.'
  svn update ${WEBROOT}${PROJECTDIR}

  echo 'Compiling SASS.'
  drush $DRUSHALIAS compass penn_state_harrisburg

  echo 'Clearing Drupal cache.'
  drush $DRUSHALIAS cc all
}
_EOFD_
    ;;
  academia)
    #TODO Subprojects need reverted as well but we are hard-coding them, which is OK for now but could be a hurdel to refactoring
    PROJECTDIR="${WEBROOT}/sites/all/modules/${PROJECT}"
    read -d '' DEPLOYFUNCTION << _EOFD_
function runDeployment {
  echo 'Updating project from source repository.'
  svn update ${PROJECTDIR}
  
  echo 'Applying ID fix.'
  sed -i 's/497/533/g' ${PROJECTDIR}/academia.views_default.inc
  
  echo 'Clearing Drupal cache.'
  drush $DRUSHALIAS cc all

  echo 'Reverting features.'
  drush $DRUSHALIAS fr ${PROJECT} -y
  drush $DRUSHALIAS fr academia_news -y
  drush $DRUSHALIAS fr academia_external_websites -y
  drush $DRUSHALIAS fr academia_file_content_type -y
  drush $DRUSHALIAS fr academia_configurations -y
  drush $DRUSHALIAS fr academia_recommended_academic_plan_integration -y
}
_EOFD_
    ;;
  recommended_academic_plan)
    standard_feature_deployment
    ;;
  administrative_offices)
    standard_feature_deployment
    ;;
  group_feeds)
    #TODO This module actually had initial deployment issues related to the data module
  	standard_feature_deployment
    ;;
  venued_events)
    standard_feature_deployment
    ;;
  housing)
    standard_feature_deployment
    ;;
  *)
    echo "Project, ${PROJECT}, not found."
    exit 3 
esac

# **************************************************
# Attempt to copy production file information 
# TODO: This feature isn't fully baked. Use with caustion
# **************************************************
if [ ${FLAGS_sync} -eq ${FLAGS_TRUE} ] && [ ${FLAGS_env} -ne 'prod' ]; then
  echo "Pulling files from production. This may take a few minutes."
  #TODO Make this fully work properly with the env flag
  sudo rsync --rsync-path="nice rsync" -e "ssh -p ${port[1]}" -raz --exclude-from="${SYNCEXCLUDEFILE}" `whoami`@${$webhost[1]}:${webroot[1]}/ $WEBROOT
fi

# **************************************************
# Build the bash command that will be executed in  
# the shell
# **************************************************
case $ACTION in
  info)
    COMMAND="echo \"Getting project info from ${WEBENVHOST}.\""
    COMMAND=$COMMAND";CURRENT_REVISION=\`svn info ${PROJECTDIR} | grep Revision | cut -f2 -d' '\`"
    COMMAND=$COMMAND";echo \"Current revision on ${DRUSHALIAS}: \$CURRENT_REVISION\""
    COMMAND=$COMMAND";REPO_REVISION=\`svn status -u ${PROJECTDIR} | grep 'Status against revision' | cut -d: -f2 | sed -r 's/\s+//'\`"
    COMMAND=$COMMAND";echo 'Repository revision: '\$REPO_REVISION"
    COMMAND=$COMMAND";if [ \$CURRENT_REVISION -eq \$REPO_REVISION ]; then echo 'Revisions are the same'; else svn log -r \$((\$CURRENT_REVISION+1)):\$REPO_REVISION ${PROJECTDIR}; fi"
    ;;
  deploy)
    echo "Deploying project to ${WEBENVHOST}."
    if ${REMOTE}; then 
      COMMAND="${DEPLOYFUNCTION}; runDeployment"
    else
      COMMAND="${DEPLOYFUNCTION}; runDeployment"
    fi
    ;;
  *)
    echo "$ACTION is not a valid action."
    exit 4
esac

# **************************************************
# Run the command
# **************************************************

if [ ${FLAGS_debug} -eq ${FLAGS_TRUE} ]; then
  echo "Executing: $COMMAND"
fi

if ${REMOTE}; then
  ssh -t -p ${PORTNUMBER} ${webhost[$ENVNUM]} "${COMMAND}"
else
  eval "${COMMAND}"
fi

exit 0